CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(track)
ADD_DEFINITIONS(-std=c++11)
ADD_DEFINITIONS(-g -O3)

FIND_PACKAGE(OpenCV REQUIRED)
if(NOT OPENCV_FOUND)
    MESSAGE(WARNING "OpenCV not found!")
else()
    INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
endif()

FIND_PACKAGE(CUDA REQUIRED)

INCLUDE_DIRECTORIES(src/tracker)
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(src)

IF(PRECISION)
    ADD_DEFINITIONS(-DPRECISION)
ENDIF()

IF(RESULT_SAVE_PHOTO)
    ADD_DEFINITIONS(-DRESULT_SAVE_PHOTO)
ENDIF()

IF(PERFORMANCE)
    ADD_DEFINITIONS(-DPERFORMANCE)
ENDIF()

FILE(GLOB_RECURSE sourcefiles "src/tracker/*.cpp" "src/*.cpp")
#SET(SRC main.cpp tracker/fhog.cpp tracker/kcftracker.cpp)
#SET(CUDA_SRC src/tracker/fhog.cu)
FILE(GLOB_RECURSE CUDA_SRC "src/tracker/*.cu")

SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_61,code=sm_61;-std=c++11;)

#ADD_EXECUTABLE(track ${SRC})
CUDA_ADD_EXECUTABLE(track ${sourcefiles} ${CUDA_SRC})

TARGET_LINK_LIBRARIES(track ${OpenCV_LIBS})
TARGET_LINK_LIBRARIES(track -lpthread -lm -lstdc++)

SET(CMAKE_BUILD_TYPE "Release")
IF(CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O3")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
